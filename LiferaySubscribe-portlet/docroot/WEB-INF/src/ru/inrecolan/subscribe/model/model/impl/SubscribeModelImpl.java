/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.inrecolan.subscribe.model.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.inrecolan.subscribe.model.model.Subscribe;
import ru.inrecolan.subscribe.model.model.SubscribeModel;
import ru.inrecolan.subscribe.model.model.SubscribeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Subscribe service. Represents a row in the &quot;Subscribe_Subscribe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.inrecolan.subscribe.model.model.SubscribeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubscribeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubscribeImpl
 * @see ru.inrecolan.subscribe.model.model.Subscribe
 * @see ru.inrecolan.subscribe.model.model.SubscribeModel
 * @generated
 */
@JSON(strict = true)
public class SubscribeModelImpl extends BaseModelImpl<Subscribe>
	implements SubscribeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a subscribe model instance should use the {@link ru.inrecolan.subscribe.model.model.Subscribe} interface instead.
	 */
	public static final String TABLE_NAME = "Subscribe_Subscribe";
	public static final Object[][] TABLE_COLUMNS = {
			{ "subscribeId", Types.BIGINT },
			{ "email", Types.VARCHAR },
			{ "subscribeDate", Types.TIMESTAMP },
			{ "isActivated", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Subscribe_Subscribe (subscribeId LONG not null primary key,email VARCHAR(75) null,subscribeDate DATE null,isActivated BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Subscribe_Subscribe";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.inrecolan.subscribe.model.model.Subscribe"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.inrecolan.subscribe.model.model.Subscribe"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.inrecolan.subscribe.model.model.Subscribe"),
			true);
	public static long EMAIL_COLUMN_BITMASK = 1L;
	public static long ISACTIVATED_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Subscribe toModel(SubscribeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Subscribe model = new SubscribeImpl();

		model.setSubscribeId(soapModel.getSubscribeId());
		model.setEmail(soapModel.getEmail());
		model.setSubscribeDate(soapModel.getSubscribeDate());
		model.setIsActivated(soapModel.getIsActivated());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Subscribe> toModels(SubscribeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Subscribe> models = new ArrayList<Subscribe>(soapModels.length);

		for (SubscribeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ru.inrecolan.subscribe.model.model.Subscribe"));

	public SubscribeModelImpl() {
	}

	public long getPrimaryKey() {
		return _subscribeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setSubscribeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_subscribeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Subscribe.class;
	}

	public String getModelClassName() {
		return Subscribe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("subscribeId", getSubscribeId());
		attributes.put("email", getEmail());
		attributes.put("subscribeDate", getSubscribeDate());
		attributes.put("isActivated", getIsActivated());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long subscribeId = (Long)attributes.get("subscribeId");

		if (subscribeId != null) {
			setSubscribeId(subscribeId);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Date subscribeDate = (Date)attributes.get("subscribeDate");

		if (subscribeDate != null) {
			setSubscribeDate(subscribeDate);
		}

		Boolean isActivated = (Boolean)attributes.get("isActivated");

		if (isActivated != null) {
			setIsActivated(isActivated);
		}
	}

	@JSON
	public long getSubscribeId() {
		return _subscribeId;
	}

	public void setSubscribeId(long subscribeId) {
		_subscribeId = subscribeId;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@JSON
	public Date getSubscribeDate() {
		return _subscribeDate;
	}

	public void setSubscribeDate(Date subscribeDate) {
		_subscribeDate = subscribeDate;
	}

	@JSON
	public boolean getIsActivated() {
		return _isActivated;
	}

	public boolean isIsActivated() {
		return _isActivated;
	}

	public void setIsActivated(boolean isActivated) {
		_columnBitmask |= ISACTIVATED_COLUMN_BITMASK;

		if (!_setOriginalIsActivated) {
			_setOriginalIsActivated = true;

			_originalIsActivated = _isActivated;
		}

		_isActivated = isActivated;
	}

	public boolean getOriginalIsActivated() {
		return _originalIsActivated;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Subscribe.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Subscribe toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Subscribe)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Subscribe toUnescapedModel() {
		return (Subscribe)this;
	}

	@Override
	public Object clone() {
		SubscribeImpl subscribeImpl = new SubscribeImpl();

		subscribeImpl.setSubscribeId(getSubscribeId());
		subscribeImpl.setEmail(getEmail());
		subscribeImpl.setSubscribeDate(getSubscribeDate());
		subscribeImpl.setIsActivated(getIsActivated());

		subscribeImpl.resetOriginalValues();

		return subscribeImpl;
	}

	public int compareTo(Subscribe subscribe) {
		long primaryKey = subscribe.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Subscribe)) {
			return false;
		}

		Subscribe subscribe = (Subscribe)obj;

		long primaryKey = subscribe.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SubscribeModelImpl subscribeModelImpl = this;

		subscribeModelImpl._originalEmail = subscribeModelImpl._email;

		subscribeModelImpl._originalIsActivated = subscribeModelImpl._isActivated;

		subscribeModelImpl._setOriginalIsActivated = false;

		subscribeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Subscribe> toCacheModel() {
		SubscribeCacheModel subscribeCacheModel = new SubscribeCacheModel();

		subscribeCacheModel.subscribeId = getSubscribeId();

		subscribeCacheModel.email = getEmail();

		String email = subscribeCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			subscribeCacheModel.email = null;
		}

		Date subscribeDate = getSubscribeDate();

		if (subscribeDate != null) {
			subscribeCacheModel.subscribeDate = subscribeDate.getTime();
		}
		else {
			subscribeCacheModel.subscribeDate = Long.MIN_VALUE;
		}

		subscribeCacheModel.isActivated = getIsActivated();

		return subscribeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{subscribeId=");
		sb.append(getSubscribeId());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", subscribeDate=");
		sb.append(getSubscribeDate());
		sb.append(", isActivated=");
		sb.append(getIsActivated());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("ru.inrecolan.subscribe.model.model.Subscribe");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>subscribeId</column-name><column-value><![CDATA[");
		sb.append(getSubscribeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscribeDate</column-name><column-value><![CDATA[");
		sb.append(getSubscribeDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isActivated</column-name><column-value><![CDATA[");
		sb.append(getIsActivated());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Subscribe.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Subscribe.class
		};
	private long _subscribeId;
	private String _email;
	private String _originalEmail;
	private Date _subscribeDate;
	private boolean _isActivated;
	private boolean _originalIsActivated;
	private boolean _setOriginalIsActivated;
	private long _columnBitmask;
	private Subscribe _escapedModel;
}