/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.inrecolan.subscribe.model.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Subscribe service. Represents a row in the &quot;Subscribe_Subscribe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link ru.inrecolan.subscribe.model.model.impl.SubscribeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ru.inrecolan.subscribe.model.model.impl.SubscribeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Subscribe
 * @see ru.inrecolan.subscribe.model.model.impl.SubscribeImpl
 * @see ru.inrecolan.subscribe.model.model.impl.SubscribeModelImpl
 * @generated
 */
public interface SubscribeModel extends BaseModel<Subscribe> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a subscribe model instance should use the {@link Subscribe} interface instead.
	 */

	/**
	 * Returns the primary key of this subscribe.
	 *
	 * @return the primary key of this subscribe
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this subscribe.
	 *
	 * @param primaryKey the primary key of this subscribe
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the subscribe ID of this subscribe.
	 *
	 * @return the subscribe ID of this subscribe
	 */
	public long getSubscribeId();

	/**
	 * Sets the subscribe ID of this subscribe.
	 *
	 * @param subscribeId the subscribe ID of this subscribe
	 */
	public void setSubscribeId(long subscribeId);

	/**
	 * Returns the email of this subscribe.
	 *
	 * @return the email of this subscribe
	 */
	@AutoEscape
	public String getEmail();

	/**
	 * Sets the email of this subscribe.
	 *
	 * @param email the email of this subscribe
	 */
	public void setEmail(String email);

	/**
	 * Returns the subscribe date of this subscribe.
	 *
	 * @return the subscribe date of this subscribe
	 */
	public Date getSubscribeDate();

	/**
	 * Sets the subscribe date of this subscribe.
	 *
	 * @param subscribeDate the subscribe date of this subscribe
	 */
	public void setSubscribeDate(Date subscribeDate);

	/**
	 * Returns the is activated of this subscribe.
	 *
	 * @return the is activated of this subscribe
	 */
	public boolean getIsActivated();

	/**
	 * Returns <code>true</code> if this subscribe is is activated.
	 *
	 * @return <code>true</code> if this subscribe is is activated; <code>false</code> otherwise
	 */
	public boolean isIsActivated();

	/**
	 * Sets whether this subscribe is is activated.
	 *
	 * @param isActivated the is activated of this subscribe
	 */
	public void setIsActivated(boolean isActivated);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Subscribe subscribe);

	public int hashCode();

	public CacheModel<Subscribe> toCacheModel();

	public Subscribe toEscapedModel();

	public Subscribe toUnescapedModel();

	public String toString();

	public String toXmlString();
}